import java.io.IOException;
import java.sql.* ;
import java.util.List;
import java.util.ArrayList;
import java.util.Date;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.servlet.Servlet;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.sql.DataSource;

import org.commonmark.node.*;
import org.commonmark.parser.Parser;
import org.commonmark.renderer.html.HtmlRenderer;

import postsdatabase.PostsDatabase;
import postlists.PostLists;
import posttitlebody.PostTitleBody;
import markdownparser.MarkdownParser;
/**
 * Servlet implementation class for Servlet: ConfigurationTest
 *
 */
public class Editor extends HttpServlet {
    /**
     * The Servlet constructor
     * 
     * @see javax.servlet.http.HttpServlet#HttpServlet()
     */
    public Editor() {}

    public void init() throws ServletException
    {
        /*  write any servlet initialization code here or remove this function */
        try {
            Class.forName("com.mysql.jdbc.Driver");
        } catch (ClassNotFoundException ex) {
            System.err.println(ex);
            return;
        }
    }
    
    public void destroy()
    {
        /*  write any servlet cleanup code here or remove this function */
    }

    /**
     * Handles HTTP GET requests
     * 
     * @see javax.servlet.http.HttpServlet#doGet(HttpServletRequest request,
     *      HttpServletResponse response)
     */
    public void doGet(HttpServletRequest request, HttpServletResponse response)
        throws ServletException, IOException 
    {
	    // implement your GET method handling code here
	    // currently we simply show the page generated by "edit.jsp"
        String action = request.getParameter("action");

        try{
            PostsDatabase pd = new PostsDatabase("jdbc:mysql://localhost:3306/CS144", "cs144", "");

            switch(action==null?"":action) { 
                case "open": // return the "edit page" for the post with the given postid by the user
                    openAction(request, response, pd);
                    break;
                case "preview": // return the "preview page" with the html rendering of the given title and body
                    previewAction(request, response);
                    break;
                case "list": // return the "list page" for the user
                    listAction(request, response, pd);
                    break;
                default:
                    errorHandler(request, response, HttpServletResponse.SC_BAD_REQUEST);
            }
        } catch (SQLException ex){
            SQLExceptionHandler(request, response, ex);
        }
    }
    
    /**
     * Handles HTTP POST requests
     * 
     * @see javax.servlet.http.HttpServlet#doPost(HttpServletRequest request,
     *      HttpServletResponse response)
     */
    public void doPost(HttpServletRequest request, HttpServletResponse response)
        throws ServletException, IOException 
    {
	// implement your POST method handling code here
	// currently we simply show the page generated by "edit.jsp"
    // POST Requests will not show up in the URL
        String action = request.getParameter("action");

        try {
            PostsDatabase pd = new PostsDatabase("jdbc:mysql://localhost:3306/CS144", "cs144", "");
            
            switch(action==null?"":action) { 
                case "open": // return the "edit page" for the post with the given postid by the user
                    openAction(request, response, pd);
                    break;
                case "save": // save the post into the database and go to the "list page" for the user
                    saveAction(request, response, pd);
                    break; 
                case "delete": // delete the corresponding post and go to the "list page"
                    deleteAction(request, response, pd);
                    break; 
                case "preview": // return the "preview page" with the html rendering of the given title and body
                    previewAction(request, response);
                    break;
                case "list": // return the "list page" for the user
                    listAction(request, response, pd);
                    break;
                default: // Null Case.
                    // No Action Chosen.
                    errorHandler(request, response, HttpServletResponse.SC_BAD_REQUEST);
            }
        } catch (SQLException ex){
            SQLExceptionHandler(request, response, ex);
        }
    }

    private void openAction(HttpServletRequest request, HttpServletResponse response, PostsDatabase pd) throws ServletException, IOException, SQLException {
        if (request.getParameter("username") == null || request.getParameter("postid") == null) {
            errorHandler(request, response, HttpServletResponse.SC_BAD_REQUEST);
        }
        else {
            try {
                if(Integer.parseInt(request.getParameter("postid")) > 0) {
                    if (request.getParameter("title") != null && request.getParameter("body") != null) {
                        request.setAttribute("title", request.getParameter("title"));
                        request.setAttribute("body", request.getParameter("body"));
                        request.getRequestDispatcher("/edit.jsp").forward(request, response);
                    }
                    else {
                        PostTitleBody ptb = pd.getPostTitleBody(request.getParameter("username"), Integer.parseInt(request.getParameter("postid")));
                        if (ptb != null && ptb.title != null && ptb.body != null) {
                            String title = ptb.title;
                            String body = ptb.body;

                            request.setAttribute("title", title);
                            request.setAttribute("body", body);

                            request.getRequestDispatcher("/edit.jsp").forward(request, response);
                        }
                        else {
                            errorHandler(request, response, HttpServletResponse.SC_BAD_REQUEST);
                        }
                    }
                }
                else {
                    if (request.getParameter("title") != null) {
                        request.setAttribute("title", request.getParameter("title"));
                    }
                    else {
                        request.setAttribute("title", "");
                    }
                    if (request.getParameter("body") != null) {
                        request.setAttribute("body", request.getParameter("body"));
                    }
                    else {
                        request.setAttribute("body", "");
                    }
                    request.getRequestDispatcher("/edit.jsp").forward(request, response);
                }
            }
            catch (NumberFormatException nfe)
            {
                System.err.println("NumberFormatException: " + nfe.getMessage());
                errorHandler(request, response, HttpServletResponse.SC_BAD_REQUEST);
            }
        }
    }

    private void previewAction(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException
    {
        if (request.getParameter("username") == null || request.getParameter("postid") == null || request.getParameter("title")== null || request.getParameter("body") == null) {
            errorHandler(request, response, HttpServletResponse.SC_BAD_REQUEST);
        }
        else {
            MarkdownParser mp = new MarkdownParser();
            String markdownTitle = mp.convertToMarkdown(request.getParameter("title"));
            String markdownBody = mp.convertToMarkdown(request.getParameter("body"));

            request.setAttribute("title", markdownTitle);
            request.setAttribute("body", markdownBody);

            request.getRequestDispatcher("/preview.jsp").forward(request, response);
        }
    }

    private void listAction(HttpServletRequest request, HttpServletResponse response, PostsDatabase pd) throws ServletException, IOException, SQLException
    {
        if (request.getParameter("username") == null) {
            errorHandler(request, response, HttpServletResponse.SC_BAD_REQUEST);
        }

        PostLists pl = pd.getPosts(request.getParameter("username"));
        request = listRequest(request, pl);

        request.getRequestDispatcher("/list.jsp").forward(request, response);
    }

    private void saveAction(HttpServletRequest request, HttpServletResponse response, PostsDatabase pd) throws ServletException, IOException, SQLException
    {
        // We still need to check for parameters.
        if (request.getParameter("username") == null || request.getParameter("postid") == null || request.getParameter("title")== null || request.getParameter("body") == null) {
            errorHandler(request, response, HttpServletResponse.SC_BAD_REQUEST);
        }
        else {
            try {
                int postid = Integer.parseInt(request.getParameter("postid"));
                pd.savePost(request.getParameter("username"), postid, request.getParameter("title"), request.getParameter("body"));
            }
            catch (NumberFormatException nfe)
            {
                System.err.println("NumberFormatException: " + nfe.getMessage());
                errorHandler(request, response, HttpServletResponse.SC_BAD_REQUEST);
            }

            PostLists pl = pd.getPosts(request.getParameter("username"));
            
            request = listRequest(request, pl);
            request.getRequestDispatcher("/list.jsp").forward(request, response);
        }
    }

    private void deleteAction(HttpServletRequest request, HttpServletResponse response, PostsDatabase pd) throws ServletException, IOException, SQLException
    {
        if (request.getParameter("username") == null || request.getParameter("postid") == null) {
            errorHandler(request, response, HttpServletResponse.SC_BAD_REQUEST);
        }
        else {
            try {
                pd.delete_post(request.getParameter("username"), Integer.parseInt(request.getParameter("postid")));
            }
            catch (NumberFormatException nfe)
            {
                System.err.println("NumberFormatException: " + nfe.getMessage());
                errorHandler(request, response, HttpServletResponse.SC_BAD_REQUEST);
            }

            PostLists pl = pd.getPosts(request.getParameter("username"));
            request = listRequest(request, pl);

            request.getRequestDispatcher("/list.jsp").forward(request, response);
        }
    }

    private void SQLExceptionHandler(HttpServletRequest request, HttpServletResponse response, SQLException ex) throws ServletException, IOException
    {
        System.err.println("SQLException caught");
        System.err.println("---");
        while ( ex != null ) {
            System.err.println("Message   : " + ex.getMessage());
            System.err.println("SQLState  : " + ex.getSQLState());
            System.err.println("ErrorCode : " + ex.getErrorCode());
            System.err.println("---");
            ex = ex.getNextException();
        }
        errorHandler(request, response, HttpServletResponse.SC_NOT_FOUND);
    }

    private void errorHandler(HttpServletRequest request, HttpServletResponse response, int statusCode) throws ServletException, IOException
    {
        response.setStatus(statusCode);
        request.getRequestDispatcher("/error.jsp").forward(request, response);
    }

    private HttpServletRequest listRequest(HttpServletRequest request, PostLists pl)
    {
        request.setAttribute("postidList", pl.postidList);
        request.setAttribute("titleList", pl.titleList);
        request.setAttribute("createdTimeList", pl.createdTimeList);
        request.setAttribute("modifiedTimeList", pl.modifiedTimeList);
        request.setAttribute("size", pl.size);

        return request;
    }
}
